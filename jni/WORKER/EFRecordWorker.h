/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_android_video_worker_EFRecordWorker */

#ifndef _Included_com_android_video_worker_EFRecordWorker
#define _Included_com_android_video_worker_EFRecordWorker
#ifdef __cplusplus
extern "C" {
#endif

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    createMainWorker
 * Signature: (Ljava/lang/Object;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_createRecordWorker
  (JNIEnv *, jobject, jobject, jint, jint, jstring);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    updateCameraImage
 * Signature: (II[B)Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_updateCameraImage
  (JNIEnv *, jobject, jint, jint, jbyteArray);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    destoryMainWorker
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_destoryRecordWorker
  (JNIEnv *, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    pausedRecordWorker
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_pausedRecordWorker
  (JNIEnv *, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    resumeRecordWorker
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_resumeRecordWorker
  (JNIEnv *, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    setRecordProgress
 * Signature: (Lcom/android/video/worker/EFRecordWorker/EFRecordWorkerProgress;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_setRecordProgress
  (JNIEnv *, jobject, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    pauseLoopAnimation
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_pauseLoopAnimation
  (JNIEnv *, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    resumeLoopAnimation
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_resumeLoopAnimation
  (JNIEnv *, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    startRecordVideo
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_startRecordVideo
  (JNIEnv *, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    stopRecordVideo
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_stopRecordVideo
  (JNIEnv *, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    deleteRecordVideo
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_deleteRecordVideo
  (JNIEnv *, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    showFilterPanel
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_showFilterPanel
  (JNIEnv *, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    hideFilterPanel
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_hideFilterPanel
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    buildRecordVideos
 * Signature: (Lcom/android/video/worker/EFRecordWorker/EFRecordWorkerProgress;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_buildRecordVideos
  (JNIEnv *, jobject, jobject);

/*
 * Class:     com_android_video_worker_EFRecordWorker
 * Method:    buildFinishVideos
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_video_worker_EFRecordWorker_buildFinishVideos
  (JNIEnv *, jobject);


#ifdef __cplusplus
}
#endif

#include "NXSDK.h"

#include "EFEffectsLayer.h"
#include "EFEffectsModel.h"

#include "EFRenderMission.h"
#include "EFBuilderMission.h"
#include "EFExtractMission.h"

class EFRecordProgress ;
class EFBuildProgress  ;

class EFRecordWorker : public NXObject
				     , public NXTimerRunner
				     , public CCActionListener
{

private:
	NXPtr<NXGLSurface> 			_drawSurface ;
	NXSize						_cameraSize  ;
	NXSDKMediaFormat			_mediaFormat ;

	std::string					_rootFolder  ;
	std::string					_recdFolder  ;
	std::string					_vidoFolder  ;

	NXPtr<NXBuffer> 			_imageCamera ; //the last draw image

	//record
	NXCCSpriteNV12*				_recordCanvas ;
	NXCCNode*					_nineptParent ;
	NXCCShareNode*				_nineptArrays[9] ;
	NXCCSprite*					_nineptFilter[9] ;
	uint32_t					_ninpetIndex  ;

	//recorder
	NXPtr<NXTimer>				_recordTimer ;
	NXPtr<NXSDKRecorder>		_recordAudio ;
	NXPtr<NXSDKWriter>			_recordWrite ;
	std::vector<std::string> 	_recordSgmts ;
	std::vector<uint32_t>		_recordFrams ;
	NXPtr<EFRecordProgress>		_recordProgs ;

	//build
	NXPtr<EFBuilderMission>		_buildMisson ;
	NXPtr<EFBuildProgress>		_buildProgrs ;

public:
	EFRecordWorker() ;
	virtual ~EFRecordWorker() ;
public:
	bool createRecordWorker(ANativeWindow* surface, int cameraWidth, int cameraHeight, const char* rootFolder) ;
	bool updateCameraImage(int width, int height, const uint8_t* data);
	bool destoryRecordWorker();

	bool pausedRecordWorker();
	bool resumeRecordWorker();

	bool setRecordProgress(JNIEnv* env, jobject progress);

	bool pauseLoopAnimation() ;
	bool resumeLoopAnimation() ;

	//record mode api
	bool startRecordVideo();
	bool stopRecordVideo();
	bool deleteRecordVideo();

	bool showFilterPanel();
	bool hideFilterPanel(int index);

	bool buildRecordVideos(JNIEnv* env, jobject progress);
	bool buildFinishVideos();

public:
	void on_create_worker(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;
	void on_paused_worker(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;
	void on_resume_worker(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;
	void on_destory_worker(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;
	void on_update_camera(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;

	void on_record_progs(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;

	void on_pause_animing(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;
	void on_resume_animing(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;

	void on_start_record(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;
	void on_stop_record(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;
	void on_delete_record(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;

	void on_show_filters(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;
	void on_hide_filters(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;

	void on_build_videos(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;
	void on_build_finish(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;

	void on_timer_calling(NXPtr<NXObject>& param1, NXPtr<NXObject>& param2, void* param3, uint32_t param4, uint64_t param5, double param6) ;

protected:
	bool is_recording() ;
	bool is_building() ;

	void create_recd_element() ;
	void destory_recd_element() ;

public:
	virtual void onActionStoped(CCAction* action) ;
	virtual void on_timer_start(NXTimer* timer) ;
	virtual void on_timer_running(NXTimer* timer) ;
	virtual void on_timer_stop(NXTimer* timer) ;
};

class EFRecordProgress : public NXObject
{
private:
	jobject			_globalObject ;
public:
	EFRecordProgress(jobject progress) ;
	virtual ~EFRecordProgress() ;
public:
	void onRecordSegmentsDuration(float duration);
	void onDeleteLastSegment(float duration) ;
	void onDeleteAllTheSegments() ;
};


class EFBuildProgress : public NXObject
{
private:
	jobject			_globalObject ;
public:
	EFBuildProgress(jobject progress) ;
	virtual ~EFBuildProgress() ;
public:
	void onBuildProgressBegin();
	void onBuildProgressProgress(float progress); //0.0-1.0
	void onBuildProgressFailure();
	void onBuildProgressComplete(const char* filePath);
};

#define RECORD_BUILD_TARGET_FILE 	"recordvideo.mpt"

#define WORKBEACH_RECORDWORK_MESSAGE_RECORDFRAME		0x2500

#define WORKBEACH_RECORDWORK_MESSAGE_CREATEWORKER		0x2501
#define WORKBEACH_RECORDWORK_MESSAGE_DESTORYWORKER		0x2502
#define WORKBEACH_RECORDWORK_MESSAGE_UPDATECAMERA		0x2503

#define WORKBEACH_RECORDWORK_MESSAGE_PAUSEDWORKER		0x2504
#define WORKBEACH_RECORDWORK_MESSAGE_RESUMEWORKER		0x2505

#define WORKBEACH_RECORDWORK_MESSAGE_SETRECDPROGRS		0x2506

#define WORKBEACH_RECORDWORK_MESSAGE_PAUSEDANIM			0x2601
#define WORKBEACH_RECORDWORK_MESSAGE_RESUMEANIM			0x2602

#define WORKBEACH_RECORDWORK_MESSAGE_STARTRECORD		0x2603
#define WORKBEACH_RECORDWORK_MESSAGE_STOPRECORD			0x2604
#define WORKBEACH_RECORDWORK_MESSAGE_DELETEVIDEO		0x2605

#define WORKBEACH_RECORDWORK_MESSAGE_SHOWFILTERS		0x2701
#define WORKBEACH_RECORDWORK_MESSAGE_HIDEFILTERS		0x2702

#define WORKBEACH_RECORDWORK_MESSAGE_BUILDVIDEOS		0x2703
#define WORKBEACH_RECORDWORK_MESSAGE_BUILDFINISH		0x2704

#endif
