package com.android.video.page;import java.io.File;import android.content.Context;import android.graphics.PixelFormat;import android.graphics.Rect;import android.os.Message;import android.util.AttributeSet;import android.util.TypedValue;import android.view.Gravity;import android.view.MotionEvent;import android.view.Surface;import android.view.SurfaceHolder;import android.view.View;import android.widget.AbsoluteLayout;import android.widget.ImageView.ScaleType;import android.widget.TextView;import com.android.video.R;import com.android.video.camera.EFCameraView;import com.android.video.camera.EFCameraView.EFCameraViewListener;import com.android.video.views.EFBlinkView;import com.android.video.views.EFImageButton;import com.android.video.views.EFImageButton.EFButtonStatus;import com.android.video.views.EFImageView;import com.android.video.views.EFPopTextView;import com.android.video.views.EFProgressView;import com.android.video.views.EFSurfaceView;import com.android.video.worker.EFRecordWorker;import com.android.video.worker.EFRecordWorker.EFBuildrWorkerProgress;import com.android.video.worker.EFRecordWorker.EFRecordWorkerProgress;import com.android.nxui.NXPageView;@SuppressWarnings("deprecation")public class EFRecordPageView extends NXPageView implements SurfaceHolder.Callback, 															EFCameraViewListener, 															View.OnClickListener, 															View.OnTouchListener, 															EFRecordWorkerProgress,															EFBuildrWorkerProgress{		private static final int	RECORD_DURATN_UPDATE = 5626230 ;	private static final int	RECORD_DELETE_LAST 	 = 5626231 ;	private static final int	RECORD_DELETE_ALL 	 = 5626232 ;	private static final int    BUILD_SEGMENT_START  = 5626241 ;	private static final int    BUILD_SEGMENT_PROGRS = 5626242 ;	private static final int    BUILD_SEGMENT_FAILED = 5626243 ;	private static final int    BUILD_SEGMENT_FINISH = 5626244 ;	private String				rootFolder	  = null ;		private EFCameraView		camerarView   = null ;	private EFRecordWorker		recordWorker  = null ;		//header	private LayoutParams		headerLayout  = null ;		//record header	private AbsoluteLayout		recordHeader  = null ; //录制时顶部View	private EFBlinkView			recordLabel   = null ;	private TextView			recordTitler  = null ; //录制时显示的标题	private EFImageButton		recordCamera  = null ; //录制时切换摄像头		//drawer	private AbsoluteLayout		surfaceGroup  = null ;	private EFImageView			surfaceBack   = null ;	private EFSurfaceView		surfaceView   = null ; //中间显示画面的surface		//buttons	private LayoutParams		pannelLayout  = null ;	private LayoutParams		covorLayout   = null ;		//record buttons	private AbsoluteLayout		recordPannel  = null ; //录制时的面板。	private EFImageButton		recordButton  = null ;	private EFImageButton		importButton  = null ;	private EFImageButton		deleteButton  = null ;	private EFImageButton		filterButton  = null ;	private EFImageButton		confrmButton  = null ;		private int 				selectFilter  = 4 ;	private EFProgressView 		buildProgress = null ;	protected EFRecordPageView(Context context, AttributeSet attrs, int defStyle) {		super(context, attrs, defStyle);		this.initRecordPageView() ;	}	protected EFRecordPageView(Context context, AttributeSet attrs) {		super(context, attrs);		this.initRecordPageView() ;	}	protected EFRecordPageView(Context context) {		super(context);		this.initRecordPageView() ;	}		public EFRecordPageView(Context context, String rootFolder) {		super(context);		this.rootFolder = rootFolder ;		this.initRecordPageView() ;	}		protected void initRecordPageView() {				super.setBackgroundColor(0xFF1B1E20) ;				this.camerarView = new EFCameraView(getContext());		this.camerarView.setLayoutParams(new NXPageView.LayoutParams(1, 1, -1, -1)) ; //out off screen.		this.camerarView.setCameraListenrer(this) ;		this.addView(this.camerarView) ;				this.headerLayout = new NXPageView.LayoutParams(headerRect.width(), headerRect.height(), headerRect.left, headerRect.top) ;		this.pannelLayout = new NXPageView.LayoutParams(clientRect.width(), clientRect.height() -clientRect.width()-headerRect.height(), clientRect.left, clientRect.top+headerRect.height()+clientRect.width()) ;		this.covorLayout  = new NXPageView.LayoutParams(clientRect.width(), clientRect.height(), clientRect.left, clientRect.top) ;				this.surfaceGroup = new AbsoluteLayout(getContext()) ;		this.surfaceGroup.setBackgroundColor(0xFF000000);		this.surfaceGroup.setLayoutParams(new NXPageView.LayoutParams(clientRect.width(), clientRect.width(), clientRect.left, clientRect.top+headerRect.height())) ;		this.addView(this.surfaceGroup) ;				this.surfaceBack = new EFImageView(getContext()) ;		this.surfaceBack.setScaleType(ScaleType.CENTER_INSIDE);		this.surfaceBack.setImageResource(R.drawable.icon_draw_surface);		this.surfaceBack.setLayoutParams(new NXPageView.LayoutParams(clientRect.width(), clientRect.width(), 0, 0)) ;		this.surfaceGroup.addView(this.surfaceBack) ;				this.surfaceView = new EFSurfaceView(getContext());		this.surfaceView.setLayoutParams(new NXPageView.LayoutParams(clientRect.width(), clientRect.width(), 0, 0)) ;		this.surfaceView.getHolder().setFormat(PixelFormat.RGBA_8888);		this.surfaceView.getHolder().addCallback(this) ;		this.surfaceView.setOnTouchListener(this) ;		this.surfaceGroup.addView(this.surfaceView) ;				this.initRecrodViews() ;	}		protected void initRecrodViews() {				this.recordHeader = new AbsoluteLayout(getContext()) ;		this.recordHeader.setBackgroundColor(0xFF1B1E20) ;		this.recordHeader.setLayoutParams(this.headerLayout) ;		this.addView(this.recordHeader, 1) ;						this.recordTitler = new TextView(getContext()); 		this.recordTitler.setGravity(Gravity.CENTER_HORIZONTAL|Gravity.CENTER_VERTICAL) ;		this.recordTitler.setTextSize(TypedValue.COMPLEX_UNIT_PX, headerRect.height()/2);		this.recordTitler.setTextColor(0xFFEEEEEE) ;		this.recordTitler.setText("00:00:00") ;		int titleWidth = (int)this.recordTitler.getPaint().measureText(this.recordTitler.getText().toString()) ;		this.recordTitler.setLayoutParams(new NXPageView.LayoutParams(titleWidth, headerRect.height(), (headerRect.width()-titleWidth)/2, 0)) ;		this.recordHeader.addView(this.recordTitler) ;				this.recordLabel  = new EFBlinkView(getContext()) ;		this.recordLabel.setLayoutParams(new NXPageView.LayoutParams(headerRect.height()/2, headerRect.height(), (headerRect.width()-titleWidth)/2-headerRect.height()/2, 0)) ;		this.recordLabel.setScaleType(ScaleType.CENTER_INSIDE) ;		this.recordLabel.setImageResource(R.drawable.icon_record_label) ;		this.recordLabel.setPadding(headerRect.height()/5, 0, headerRect.height()/12, 0) ;		this.recordLabel.setBlinkFreq(1.5f) ;		this.recordHeader.addView(this.recordLabel) ;				this.recordCamera = new EFImageButton(getContext()) ;		this.recordCamera.setLayoutParams(new NXPageView.LayoutParams(headerRect.height(), headerRect.height(),headerRect.width()-headerRect.height(), 0)) ;		this.recordCamera.setScaleType(ScaleType.CENTER_INSIDE) ;		this.recordCamera.setPadding(headerRect.height()/5, headerRect.height()/5, headerRect.height()/5, headerRect.height()/5) ;		this.recordCamera.setImageResource(EFButtonStatus.BUTTON_STATUS_NORMAL, R.drawable.btn_reverse_normal) ;		this.recordCamera.setImageResource(EFButtonStatus.BUTTON_STATUS_SELECT, R.drawable.btn_reverse_select) ;		this.recordHeader.addView(this.recordCamera) ;				this.recordPannel = new AbsoluteLayout(getContext()) ;		this.recordPannel.setBackgroundColor(0xFF1B1E20) ;		this.recordPannel.setLayoutParams(this.pannelLayout) ;		this.addView(this.recordPannel, 1) ;				Rect btnsRect = new Rect(0, 0, this.pannelLayout.width, this.pannelLayout.height);		int recrdSize = Math.min((int)(btnsRect.width()/3.5f), btnsRect.height()) ;		int otherSize = Math.min((int)(btnsRect.width()/5.0f), btnsRect.height()) ;		int otherPadding = (int)(otherSize/7) ;				this.recordButton = new EFImageButton(getContext()) ;		this.recordButton.setScaleType(ScaleType.CENTER_INSIDE) ;		this.recordButton.setImageResource(EFButtonStatus.BUTTON_STATUS_NORMAL, R.drawable.btn_record_normal) ;		this.recordButton.setImageResource(EFButtonStatus.BUTTON_STATUS_SELECT, R.drawable.btn_record_select) ;		this.recordButton.setLayoutParams(new NXPageView.LayoutParams(recrdSize, recrdSize, btnsRect.left+(btnsRect.width()-recrdSize)/2,btnsRect.top+(btnsRect.height()-recrdSize)/2)) ;		this.recordButton.setOnClickListener(this) ;		this.recordPannel.addView(this.recordButton) ;				this.importButton = new EFImageButton(getContext()) ;		this.importButton.setScaleType(ScaleType.CENTER_INSIDE) ;		this.importButton.setImageResource(EFButtonStatus.BUTTON_STATUS_NORMAL, R.drawable.btn_import_normal) ;		this.importButton.setLayoutParams(new NXPageView.LayoutParams(otherSize, otherSize, btnsRect.left+((btnsRect.width()-recrdSize)/2-otherSize)/2,btnsRect.top+(btnsRect.height()-otherSize)/2)) ;		this.importButton.setPadding(otherPadding, otherPadding, otherPadding, otherPadding) ;		this.importButton.setOnClickListener(this) ;		this.recordPannel.addView(this.importButton) ;				this.deleteButton = new EFImageButton(getContext()) ;		this.deleteButton.setVisibility(View.INVISIBLE) ;		this.deleteButton.setScaleType(ScaleType.CENTER_INSIDE) ;		this.deleteButton.setImageResource(EFButtonStatus.BUTTON_STATUS_NORMAL, R.drawable.btn_delete_normal) ;		this.deleteButton.setImageResource(EFButtonStatus.BUTTON_STATUS_SELECT, R.drawable.btn_delete_select) ;		this.deleteButton.setLayoutParams(this.importButton.getLayoutParams()) ;		this.deleteButton.setPadding(otherPadding, otherPadding, otherPadding, otherPadding) ;		this.deleteButton.setOnClickListener(this) ;		this.recordPannel.addView(this.deleteButton) ;				this.filterButton = new EFImageButton(getContext()) ;		this.filterButton.setScaleType(ScaleType.CENTER_INSIDE) ;		this.filterButton.setImageResource(EFButtonStatus.BUTTON_STATUS_NORMAL, R.drawable.btn_filter_normal) ;		this.filterButton.setImageResource(EFButtonStatus.BUTTON_STATUS_SELECT, R.drawable.btn_filter_select) ;		this.filterButton.setLayoutParams(new NXPageView.LayoutParams(otherSize, otherSize, btnsRect.right-btnsRect.width()/4-recrdSize/4,btnsRect.top+(btnsRect.height()-otherSize)/2)) ;		this.filterButton.setPadding(otherPadding, otherPadding, otherPadding, otherPadding) ;		this.filterButton.setOnClickListener(this) ;		this.recordPannel.addView(this.filterButton) ;		this.confrmButton = new EFImageButton(getContext()) ;		this.confrmButton.setVisibility(View.INVISIBLE) ;		this.confrmButton.setScaleType(ScaleType.CENTER_INSIDE) ;		this.confrmButton.setImageResource(EFButtonStatus.BUTTON_STATUS_NORMAL, R.drawable.btn_confrm_normal) ;		this.confrmButton.setImageResource(EFButtonStatus.BUTTON_STATUS_SELECT, R.drawable.btn_confrm_select) ;		this.confrmButton.setLayoutParams(this.filterButton.getLayoutParams()) ;		this.confrmButton.setPadding(otherPadding, otherPadding, otherPadding, otherPadding) ;		this.confrmButton.setOnClickListener(this) ;		this.recordPannel.addView(this.confrmButton) ;	}		public void surfaceCreated(SurfaceHolder holder) {		File rootDir = new File(this.rootFolder);		if(!rootDir.exists())			rootDir.mkdirs() ;				String recdPath = String.format("%s%s", this.rootFolder, "/record") ;		File recdDir = new File(recdPath);		if(!recdDir.exists())			recdDir.mkdirs() ;				String vidoPath = String.format("%s%s", this.rootFolder, "/videos") ;		File vidoDir = new File(vidoPath);		if(!vidoDir.exists())			vidoDir.mkdirs() ;				File[] subFiles = recdDir.listFiles() ;		if(subFiles != null) {			for(File file : subFiles)				file.delete() ;		}						Surface surface = this.surfaceView.getHolder().getSurface() ;						this.recordWorker = new EFRecordWorker();		this.recordWorker.createRecordWorker(surface, camerarView.getDefaultWidth(), camerarView.getDefaultHeight(), this.rootFolder) ;		this.recordWorker.setRecordProgress(this) ;	}	public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {			}	public void surfaceDestroyed(SurfaceHolder holder) {		this.recordWorker.destoryRecordWorker() ;		this.recordWorker = null ;	}		public void onPageViewWillShow() {		NXPageView.LayoutParams layoutParam = (NXPageView.LayoutParams)this.surfaceView.getLayoutParams() ;		layoutParam.x = -this.getWidth() ;		layoutParam.y = -this.getWidth() ;		this.surfaceView.setLayoutParams(layoutParam) ;		super.onPageViewWillShow();	}		public void onPageViewDidShow() {		NXPageView.LayoutParams layoutParam = (NXPageView.LayoutParams)this.surfaceView.getLayoutParams() ;		layoutParam.x = 0 ;		layoutParam.y = 0 ;		this.surfaceView.setLayoutParams(layoutParam) ;		if(this.getPageShows() > 0) {			this.recordWorker.resumeRecordWorker() ;			this.camerarView.pausePreview(false);		}		super.onPageViewDidShow();	}	public void onPageViewWillHide() {		NXPageView.LayoutParams layoutParam = (NXPageView.LayoutParams)this.surfaceView.getLayoutParams() ;		layoutParam.x = -this.getWidth() ;		layoutParam.y = -this.getWidth() ;		this.surfaceView.setLayoutParams(layoutParam) ;		this.recordWorker.pausedRecordWorker() ;		this.camerarView.pausePreview(true);		super.onPageViewWillHide();	}	public void onCameraPreviewFrame(int width, int height, byte[] data, int format) {		if(this.recordWorker != null) {			this.recordWorker.updateCameraImage(width, height, data) ;		}	}	public boolean handleMessage(Message msg) {		if(msg.what == RECORD_DURATN_UPDATE) {			Float duration = (Float)msg.obj ;			int  seconds = duration.intValue() ;			String timeString = String.format("%02d:%02d:%02d", seconds/3600, (seconds%3600)/60, seconds%60) ;			this.recordTitler.setText(timeString) ;		}		else if(msg.what == RECORD_DELETE_LAST) {			Float duration = (Float)msg.obj ;			float seconds = duration.floatValue() ;			String popText = String.format("-%.1f", seconds) ;			EFPopTextView.showPopTextView(getContext(), this.surfaceGroup, popText, this.getWidth()/4, 0xFFFF0000, 0.8f) ;		}		else if(msg.what == RECORD_DELETE_ALL) {			this.filterButton.setVisibility(View.VISIBLE) ;			this.confrmButton.setVisibility(View.INVISIBLE) ;			this.importButton.setVisibility(View.VISIBLE) ;			this.deleteButton.setVisibility(View.INVISIBLE) ;		}				//--//--//--//--//--//--//--//--//--		else if(msg.what == BUILD_SEGMENT_START) {			this.buildProgress = new EFProgressView(getContext(), this.headerRect.height()/2) ;			this.buildProgress.setLayoutParams(this.covorLayout) ;			this.addView(this.buildProgress) ;			return true ;		}		else if(msg.what == BUILD_SEGMENT_PROGRS) {			Float progress = (Float)msg.obj ;			this.buildProgress.setProgress(progress.floatValue()) ;			return true ;		}		else if(msg.what == BUILD_SEGMENT_FAILED) {			this.buildProgress.setProgress(0) ;			this.removeView(this.buildProgress) ;			return true ;		}		else if(msg.what == BUILD_SEGMENT_FINISH) {			this.buildProgress.setProgress(1.0f) ;			this.removeView(this.buildProgress) ;			this.buildProgress = null ;			this.recordWorker.buildFinishVideos() ;			if(msg.obj != null) {				String videoFile = (String)msg.obj ;				EFEditorPageView editorPage = new EFEditorPageView(getContext(), this.rootFolder, videoFile);				this.getPageStack().pushPageView(editorPage) ;			}			return true ;		}		return false ;	}	public void onClick(View view) {		if(this.recordButton == view) {			if(this.recordButton.getButtonStatus() == EFButtonStatus.BUTTON_STATUS_NORMAL) {				this.recordWorker.startRecordVideo() ;				this.recordButton.setButtonStatus(EFButtonStatus.BUTTON_STATUS_SELECT) ;				this.filterButton.setVisibility(View.INVISIBLE) ;				this.confrmButton.setVisibility(View.VISIBLE) ;				this.importButton.setVisibility(View.INVISIBLE) ;				this.deleteButton.setVisibility(View.VISIBLE) ;				//this.recordLabel.startBlink() ;			}			else {				this.recordWorker.stopRecordVideo() ;				this.recordButton.setButtonStatus(EFButtonStatus.BUTTON_STATUS_NORMAL) ;				//this.recordLabel.stopBlink() ;			}		}		else if(this.importButton == view) {					}		else if(this.deleteButton == view) {			this.recordWorker.deleteRecordVideo() ;		}		else if(this.filterButton == view) {			/*			 * 面板打开定义为select状态。			 * 选择滤镜定义为active状态。			 */			if(this.filterButton.getButtonStatus() == EFButtonStatus.BUTTON_STATUS_SELECT)			{				this.recordWorker.hideFilterPanel(this.selectFilter) ;				this.filterButton.setButtonStatus(EFButtonStatus.BUTTON_STATUS_NORMAL) ;			}			else if(this.filterButton.getButtonStatus() == EFButtonStatus.BUTTON_STATUS_NORMAL)			{				this.recordWorker.showFilterPanel() ;				this.filterButton.setButtonStatus(EFButtonStatus.BUTTON_STATUS_SELECT) ;			}		}		else if(this.confrmButton == view) {			if(this.recordButton.getButtonStatus() == EFButtonStatus.BUTTON_STATUS_NORMAL) {				this.recordWorker.buildRecordVideos(this) ;			}		}	}	public boolean onTouch(View view, MotionEvent event) {				if(this.surfaceView == view) {						float posx = event.getX() ;			float posy = event.getY() ;			float width  = this.surfaceView.getWidth() ;			float height = this.surfaceView.getHeight() ;						if(this.filterButton.getButtonStatus() == EFButtonStatus.BUTTON_STATUS_SELECT) {				if(event.getAction() == MotionEvent.ACTION_DOWN) {					int row = (int)(3*posy/height) ;					int col = (int)(3*posx/width) ;					this.selectFilter = row*3+col ;					this.recordWorker.hideFilterPanel(this.selectFilter) ;					this.filterButton.setButtonStatus(EFButtonStatus.BUTTON_STATUS_NORMAL) ;				}			}		}		return true ;	}	// - - - - - - - -	public void onRecordSegmentsDuration(float duration) {		this.getPageHandler().sendMessage(Message.obtain(null, RECORD_DURATN_UPDATE, Float.valueOf(duration))) ;	}	public void onDeleteLastSegment(float duration) {		this.getPageHandler().sendMessage(Message.obtain(null, RECORD_DELETE_LAST, Float.valueOf(duration))) ;	}	public void onDeleteAllTheSegments() {		this.getPageHandler().sendEmptyMessage(RECORD_DELETE_ALL) ;	}		// - - - - - - - -	public void onBuildProgressBegin() {		this.getPageHandler().sendEmptyMessage(BUILD_SEGMENT_START) ;	}	public void onBuildProgressProgress(float progress) {		this.getPageHandler().sendMessage(Message.obtain(null, BUILD_SEGMENT_PROGRS, Float.valueOf(progress))) ;	}	public void onBuildProgressFailure() {		this.getPageHandler().sendEmptyMessage(BUILD_SEGMENT_FAILED) ;	}	public void onBuildProgressComplete(String buildFile) {		this.getPageHandler().sendMessage(Message.obtain(null, BUILD_SEGMENT_FINISH, buildFile)) ;	}		public String getPageName() {		return "RecordPage";	}	}